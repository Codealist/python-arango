from __future__ import absolute_import, unicode_literals

from arango.api import APIWrapper
from arango.cursor import Cursor
from arango.exceptions import (
    AQLQueryExplainError,
    AQLQueryValidateError,
    AQLQueryExecuteError,
    AQLFunctionCreateError,
    AQLFunctionDeleteError,
    AQLFunctionListError,
    AQLCacheClearError,
    AQLCacheConfigureError,
    AQLCachePropertiesError,
    AQLRunningQueryGetError, AQLSlowQueryGetError, AQLSlowQueryClearError,
    AQLQueryTrackingGetError, AQLQueryKillError)
from arango.request import Request


class AQL(APIWrapper):
    """Wrapper for invoking ArangoDB Query Language (AQL).

    :param connection: HTTP connection.
    :type connection: arango.connection.Connection
    :param executor: API executor.
    :type executor: arango.api.APIExecutor
    """

    def __init__(self, connection, executor):
        super(AQL, self).__init__(connection, executor)
        self._cache = AQLQueryCache(connection, executor)

    def __repr__(self):
        return '<AQL in {}>'.format(self._conn.database)

    @property
    def cache(self):
        """Return the query cache.

        :return: Query cache.
        :rtype: arango.aql.AQLQueryCache
        """
        return self._cache

    def explain(self, query, all_plans=False, max_plans=None, opt_rules=None):
        """Inspect the AQL query and return its metadata.

        :param query: Query to inspect.
        :type query: str or unicode
        :param all_plans: If set to True, all possible execution plans are
            returned in the result. If set to False, only the optimal plan
            is returned.
        :type all_plans: bool
        :param max_plans: Total number of plans generated by the optimizer.
        :type max_plans: int
        :param opt_rules: List of optimizer rules.
        :type opt_rules: list
        :return: Execution plan (or plans if **all_plans** was set to True).
        :rtype: dict or list
        :raise arango.exceptions.AQLQueryExplainError: If explain fails.
        """
        options = {'allPlans': all_plans}
        if max_plans is not None:
            options['maxNumberOfPlans'] = max_plans
        if opt_rules is not None:
            options['optimizer'] = {'rules': opt_rules}

        request = Request(
            method='post',
            endpoint='/_api/explain',
            data={'query': query, 'options': options}
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLQueryExplainError(resp)

            if 'plan' in resp.body:
                return resp.body['plan']
            else:
                return resp.body['plans']

        return self._execute(request, response_handler)

    def validate(self, query):
        """Validate the AQL query.

        :param query: Query to validate.
        :type query: str or unicode
        :return: True if the validation is successful, False otherwise.
        :rtype: bool
        :raise arango.exceptions.AQLQueryValidateError: If validate fails.
        """
        request = Request(
            method='post',
            endpoint='/_api/query',
            data={'query': query}
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLQueryValidateError(resp)
            resp.body.pop('code', None)
            resp.body.pop('error', None)
            return resp.body

        return self._execute(request, response_handler)

    def execute(self,
                query,
                count=False,
                batch_size=None,
                ttl=None,
                bind_vars=None,
                full_count=None,
                max_plans=None,
                optimizer_rules=None,
                cache=None,
                memory_limit=0,
                fail_on_warning=None,
                profile=None,
                max_transaction_size=None,
                max_warning_count=None,
                intermediate_commit_count=None,
                intermediate_commit_size=None,
                satellite_sync_wait=None):
        """Execute the AQL query and return the result cursor.

        :param query: Query to execute.
        :type query: str or unicode
        :param count: Include the document count in the cursor.
        :type count: bool
        :param batch_size: Number of documents fetched in one round trip.
        :type batch_size: int
        :param ttl: Server side time-to-live for the cursor in seconds.
        :type ttl: int
        :param bind_vars: Bind variables for the query.
        :type bind_vars: dict
        :param full_count: This parameter only applies to queries with LIMIT
            clauses. If set to True, the cursor will include the full count:
            the number of matched documents before the last LIMIT clause is
            executed. Similar to MySQL's SQL_CALC_FOUND_ROWS hint, this can
            be retrieve the number of documents found where only a subset is
            returned. Using this disables a few LIMIT optimizations and may
            lead to more documents being processed and longer query execution.
        :type full_count: bool
        :param max_plans: Maximum number of plans the optimizer generates
        :type max_plans: int
        :param optimizer_rules: List of optimizer rules
        :type optimizer_rules: [str or unicode]
        :param cache: If set to True, the query cache is used. The operation
            mode of the cache must be set to "on" or "demand".
        :type cache: bool
        :param memory_limit: Maximum amount of memory (in bytes) the query
            is allowed to use. If the query goes over the limit, it fails with
            error "resource limit exceeded". Value 0 indicates no limit.
        :type memory_limit: int
        :param fail_on_warning: If set to True, the query throws an exception
            instead of producing a warning. This parameter can be used during
            development to catch issues early. If set to False, warnings are
            returned with the query result. There is a server configuration
            option "--query.fail-on-warning" for setting the default value for
            this behaviour so it does not need to be set on a per-query level.
        :type fail_on_warning: bool
        :param profile: Return additional profiling information in the cursor
            (unless the query cache is used).
        :type profile: bool
        :param max_transaction_size: Transaction size limit in bytes. Applies
            only to RocksDB storage engine.
        :type max_transaction_size: int
        :param max_warning_count: Maximum number of warnings queries return.
        :type max_warning_count: int
        :param intermediate_commit_count: Maximum number of operations after
            which an intermediate commit is performed automatically. Applies
            only to RocksDB storage engine.
        :type intermediate_commit_count: int
        :param intermediate_commit_size: Maximum total size of operations after
            which an intermediate commit is performed automatically. Applies
            only to RocksDB storage engine.
        :type intermediate_commit_size: int
        :param satellite_sync_wait: Number of seconds in which the server must
            synchronize the satellite collections involved in the query. When
            the threshold is reached the query is stopped. This parameter is
            for enterprise version of ArangoDB only.
        :type satellite_sync_wait: int or float
        :return: document cursor
        :rtype: arango.cursor.Cursor
        :raise arango.exceptions.AQLQueryExecuteError: If execute fails.
        """
        data = {'query': query, 'count': count}
        if batch_size is not None:
            data['batchSize'] = batch_size
        if ttl is not None:
            data['ttl'] = ttl
        if bind_vars is not None:
            data['bindVars'] = bind_vars
        if cache is not None:
            data['cache'] = cache
        if memory_limit is not None:
            data['memoryLimit'] = memory_limit

        options = {}
        if full_count is not None:
            options['fullCount'] = full_count
        if max_plans is not None:
            options['maxNumberOfPlans'] = max_plans
        if optimizer_rules is not None:
            options['optimizer'] = {'rules': optimizer_rules}
        if fail_on_warning is not None:
            options['failOnWarning'] = fail_on_warning
        if profile is not None:
            options['profile'] = profile
        if max_transaction_size is not None:
            options['maxTransactionSize'] = max_transaction_size
        if max_warning_count is not None:
            options['maxWarningCount'] = max_warning_count
        if intermediate_commit_count is not None:
            options['intermediateCommitCount'] = intermediate_commit_count
        if intermediate_commit_size is not None:
            options['intermediateCommitSize'] = intermediate_commit_size
        if satellite_sync_wait is not None:
            options['satelliteSyncWait'] = satellite_sync_wait
        if options:
            data['options'] = options

        request = Request(
            method='post',
            endpoint='/_api/cursor',
            data=data
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLQueryExecuteError(resp)
            return Cursor(self._conn, resp.body)

        return self._execute(request, response_handler)

    def kill(self, query_id):
        """Kill a running AQL query.

        :param query_id: Query ID.
        :type query_id: str or unicode
        :return: True if the query was killed successfully.
        :rtype: bool
        :raise arango.exceptions.AQLQueryKillError: If kill operation fails.
        """
        request = Request(
            method='delete',
            endpoint='/_api/query/{}'.format(query_id)
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLQueryKillError(resp)
            return True

        return self._execute(request, response_handler)

    def running_queries(self):
        """Return the currently running AQL queries.

        :return: Running AQL queries.
        :rtype: [dict]
        :raise arango.exceptions.AQLRunningQueryGetError: If retrieval fails.
        """
        request = Request(
            method='get',
            endpoint='/_api/query/current'
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLRunningQueryGetError(resp)
            for query in resp.body:
                query['bind_vars'] = query.pop('bindVars')
                query['runtime'] = query.pop('runTime')
            return resp.body

        return self._execute(request, response_handler)

    def slow_queries(self):
        """Return the list of slow AQL queries.

        :return: Slow AQL queries.
        :rtype: [dict]
        :raise arango.exceptions.AQLSlowQueryGetError: If retrieval fails.
        """
        request = Request(
            method='get',
            endpoint='/_api/query/slow'
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLSlowQueryGetError(resp)
            for query in resp.body:
                query['bind_vars'] = query.pop('bindVars')
                query['runtime'] = query.pop('runTime')
            return resp.body

        return self._execute(request, response_handler)

    def clear_slow_queries(self):
        """Clear the list of slow AQL queries.

        :return: True if the slow queries were cleared successfully.
        :rtype: bool
        :raise arango.exceptions.AQLSlowQueryClearError: If clear fails.
        """
        request = Request(
            method='delete',
            endpoint='/_api/query/slow'
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLSlowQueryClearError(resp)
            return True

        return self._execute(request, response_handler)

    def tracking(self):
        """Return the properties for AQL query tracking

        :return: Properties for AQL query tracking.
        :rtype: dict
        :raise arango.exceptions.AQLQueryTrackingGetError: If retrieval fails.
        """
        request = Request(
            method='get',
            endpoint='/_api/query/properties'
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLQueryTrackingGetError(resp)
            return {
                'enabled': resp.body['enabled'],
                'max_query_string_length': resp.body['maxQueryStringLength'],
                'max_slow_queries': resp.body['maxSlowQueries'],
                'slow_query_threshold': resp.body['slowQueryThreshold'],
                'track_bind_vars': resp.body['trackBindVars'],
                'track_slow_queries': resp.body['trackSlowQueries'],
            }

        return self._execute(request, response_handler)

    def set_tracking(self,
                     enabled=None,
                     max_slow_queries=None,
                     slow_query_threshold=None,
                     max_query_string_length=None,
                     track_bind_vars=None,
                     track_slow_queries=None):
        """Return the properties for AQL query tracking

        :return: Properties for AQL query tracking.
        :rtype: dict
        :raise arango.exceptions.AQLQueryTrackingGetError: If retrieval fails.
        """
        data = {}
        if enabled is not None:
            data['enabled'] = enabled
        if max_slow_queries is not None:
            data['maxSlowQueries'] = max_slow_queries
        if max_query_string_length is not None:
            data['maxQueryStringLength'] = max_query_string_length
        if slow_query_threshold is not None:
            data['slowQueryThreshold'] = slow_query_threshold
        if track_bind_vars is not None:
            data['trackBindVars'] = track_bind_vars
        if track_slow_queries is not None:
            data['trackSlowQueries'] = track_slow_queries

        request = Request(
            method='put',
            endpoint='/_api/query/properties',
            data=data
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLFunctionListError(resp)
            return {
                'enabled': resp.body['enabled'],
                'max_query_string_length': resp.body['maxQueryStringLength'],
                'max_slow_queries': resp.body['maxSlowQueries'],
                'slow_query_threshold': resp.body['slowQueryThreshold'],
                'track_bind_vars': resp.body['trackBindVars'],
                'track_slow_queries': resp.body['trackSlowQueries'],
            }

        return self._execute(request, response_handler)

    def functions(self):
        """List the AQL functions defined in this database.

        :return: Mapping of AQL function names to their javascript code.
        :rtype: dict
        :raise arango.exceptions.AQLFunctionListError: If retrieval fails.
        """
        request = Request(method='get', endpoint='/_api/aqlfunction')

        def response_handler(resp):
            if not resp.is_success:
                raise AQLFunctionListError(resp)
            body = resp.body or {}
            return {func['name']: func['code'] for func in map(dict, body)}

        return self._execute(request, response_handler)

    def create_function(self, name, code):
        """Create a new AQL function.

        :param name: Name of the new AQL function.
        :type name: str or unicode
        :param code: Function definition in Javascript.
        :type code: str or unicode
        :return: True if the AQL function was created successfully.
        :rtype: bool
        :raise arango.exceptions.AQLFunctionCreateError: If create fails.
        """
        request = Request(
            method='post',
            endpoint='/_api/aqlfunction',
            data={'name': name, 'code': code}
        )

        def response_handler(resp):
            if resp.status_code not in (200, 201):
                raise AQLFunctionCreateError(resp)
            return not resp.body['error']

        return self._execute(request, response_handler)

    def delete_function(self, name, group=None, ignore_missing=False):
        """Delete an AQL function.

        :param name: Name of the AQL function.
        :type name: str or unicode
        :param group: If set to True, value of parameter **name** is treated
            as a namespace prefix, and all functions in the namespace are
            deleted. If set to False, the value of **name** must be a fully
            qualified function name including any namespaces.
        :type group: bool
        :param ignore_missing: Do not raise an exception on missing function.
        :type ignore_missing: bool
        :return: True if the AQL function was deleted successfully.
        :rtype: bool
        :raise arango.exceptions.AQLFunctionDeleteError: If delete fails.
        """
        params = {}
        if group is not None:
            params['group'] = group

        request = Request(
            method='delete',
            endpoint='/_api/aqlfunction/{}'.format(name),
            params=params
        )

        def response_handler(resp):
            if not resp.is_success:
                if not (resp.status_code == 404 and ignore_missing):
                    raise AQLFunctionDeleteError(resp)
            return not resp.body['error']

        return self._execute(request, response_handler)


class AQLQueryCache(APIWrapper):
    """ArangoDB query cache."""

    def __repr__(self):
        return '<AQLQueryCache in {}>'.format(self._conn.database)

    def properties(self):
        """Return the query cache properties.

        :return: Query cache properties
        :rtype: dict
        :raise arango.exceptions.AQLCachePropertiesError: If retrieval fails.
        """
        request = Request(
            method='get',
            endpoint='/_api/query-cache/properties'
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLCachePropertiesError(resp)
            return {
                'mode': resp.body['mode'],
                'limit': resp.body['maxResults']
            }

        return self._execute(request, response_handler)

    def configure(self, mode=None, limit=None):
        """Set the query cache properties.

        :param mode: Operation mode ("off", "on" or "demand").
        :type mode: str or unicode
        :param limit: Maximum number of results to be stored.
        :type limit: int
        :return: Result of the operation.
        :rtype: dict
        :raise arango.exceptions.AQLCacheConfigureError: If operation fails.
        """
        data = {}
        if mode is not None:
            data['mode'] = mode
        if limit is not None:
            data['maxResults'] = limit

        request = Request(
            method='put',
            endpoint='/_api/query-cache/properties',
            data=data
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLCacheConfigureError(resp)
            return {
                'mode': resp.body['mode'],
                'limit': resp.body['maxResults']
            }

        return self._execute(request, response_handler)

    def clear(self):
        """Clear the query cache.

        :return: Result of the operation.
        :rtype: dict
        :raise arango.exceptions.AQLCacheClearError: If clear fails.
        """
        request = Request(
            method='delete',
            endpoint='/_api/query-cache'
        )

        def response_handler(resp):
            if not resp.is_success:
                raise AQLCacheClearError(resp)
            return not resp.body['error']

        return self._execute(request, response_handler)
